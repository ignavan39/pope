function uncurryThis (r) { return function () { return Function.call.apply(r, arguments) } } function isObj (r) { return r !== null && typeof r === 'object' } function prop (r, n) { if (!isObj(r) || typeof n !== 'string') return r; for (let e = n.split('.'), o = 0; o < e.length; o++) { const t = e[o]; if ((r = hasOwnProperty(r, t) ? r[t] : null) === null) break } return r } function pope (r, n, e) { e = e || { skipUndefined: !1, throwOnUndefined: !1 }; for (var o, t = /{{2}(.+?)}{2}/g, i = r; (o = t.exec(r)) !== null;) { const p = o[1].trim(); if (p) { const u = prop(n, p); if (void 0 !== u && u !== null)i = i.replace(o[0], u); else { if (e.throwOnUndefined) { const f = new Error('Missing value for ' + o[0]); throw f.key = p, f.code = 'E_MISSING_KEY', f }e.skipUndefined || (i = i.replace(o[0], '')) } } } return i } const hasOwnProperty = uncurryThis(Object.prototype.hasOwnProperty); export { pope, prop }
